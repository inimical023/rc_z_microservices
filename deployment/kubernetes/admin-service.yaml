apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
  labels:
    app: admin-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
    spec:
      containers:
      - name: admin-service
        image: rc-zoho-microservices:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "rc_zoho_microservices.admin_service.service"]
        ports:
        - containerPort: 8000
        env:
        - name: ADMIN_SERVICE_HOST
          value: "0.0.0.0"
        - name: ADMIN_SERVICE_PORT
          value: "8000"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config.json
          subPath: config.json
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: templates-volume
          mountPath: /app/templates
        - name: static-volume
          mountPath: /app/static
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: rc-zoho-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: rc-zoho-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: rc-zoho-logs-pvc
      - name: templates-volume
        emptyDir: {}
      - name: static-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: admin-service
spec:
  selector:
    app: admin-service
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: admin-service-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: rc-zoho-admin.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-service
            port:
              number: 8000